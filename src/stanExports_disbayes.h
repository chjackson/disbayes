// Generated by rstantools.  Do not edit by hand.

/*
    disbayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    disbayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with disbayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_disbayes_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_disbayes");
    reader.add_event(0, 0, "include", "/include/trans_probs.stan");
    reader.add_event(0, 0, "start", "/include/trans_probs.stan");
    reader.add_event(75, 75, "end", "/include/trans_probs.stan");
    reader.add_event(75, 1, "restart", "model_disbayes");
    reader.add_event(164, 88, "end", "model_disbayes");
    return reader;
}
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
trans_probs_rem(const T0__& i,
                    const T1__& f,
                    const T2__& r, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 10;
        local_scalar_t__ l(DUMMY_VAR__);
        (void) l;  // dummy to suppress unused var warning
        stan::math::initialize(l, DUMMY_VAR__);
        stan::math::fill(l, DUMMY_VAR__);
        stan::math::assign(l,((i + r) + f));
        current_statement_begin__ = 11;
        local_scalar_t__ q(DUMMY_VAR__);
        (void) q;  // dummy to suppress unused var warning
        stan::math::initialize(q, DUMMY_VAR__);
        stan::math::fill(q, DUMMY_VAR__);
        stan::math::assign(q,stan::math::sqrt(((((((i * i) + ((2 * i) * r)) - ((2 * i) * f)) + (r * r)) + ((2 * f) * r)) + (f * f))));
        current_statement_begin__ = 12;
        local_scalar_t__ w(DUMMY_VAR__);
        (void) w;  // dummy to suppress unused var warning
        stan::math::initialize(w, DUMMY_VAR__);
        stan::math::fill(w, DUMMY_VAR__);
        stan::math::assign(w,stan::math::exp((-((l + q)) / 2)));
        current_statement_begin__ = 13;
        local_scalar_t__ v(DUMMY_VAR__);
        (void) v;  // dummy to suppress unused var warning
        stan::math::initialize(v, DUMMY_VAR__);
        stan::math::fill(v, DUMMY_VAR__);
        stan::math::assign(v,stan::math::exp((-((l - q)) / 2)));
        current_statement_begin__ = 14;
        validate_non_negative_index("P", "3", 3);
        validate_non_negative_index("P", "3", 3);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> P(3, 3);
        stan::math::initialize(P, DUMMY_VAR__);
        stan::math::fill(P, DUMMY_VAR__);
        current_statement_begin__ = 15;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                    (((((2 * (v - w)) * (f + r)) + (v * (q - l))) + (w * (q + l))) / (2 * q)), 
                    "assigning variable P");
        current_statement_begin__ = 16;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                    (((v - w) * r) / q), 
                    "assigning variable P");
        current_statement_begin__ = 17;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                    0, 
                    "assigning variable P");
        current_statement_begin__ = 19;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                    ((-(((f + r) - l)) * (v - w)) / q), 
                    "assigning variable P");
        current_statement_begin__ = 20;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                    (-(((((2 * (f + r)) - l) * (v - w)) - (q * (v + w)))) / (2 * q)), 
                    "assigning variable P");
        current_statement_begin__ = 21;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                    0, 
                    "assigning variable P");
        current_statement_begin__ = 23;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                    ((((-(l) * (v - w)) - (q * (v + w))) / (2 * q)) + 1), 
                    "assigning variable P");
        current_statement_begin__ = 24;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                    (((((v - w) * ((2 * f) - l)) - (q * (v + w))) / (2 * q)) + 1), 
                    "assigning variable P");
        current_statement_begin__ = 25;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                    1, 
                    "assigning variable P");
        current_statement_begin__ = 26;
        return stan::math::promote_scalar<fun_return_scalar_t__>(P);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct trans_probs_rem_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const T0__& i,
                    const T1__& f,
                    const T2__& r, std::ostream* pstream__) const {
        return trans_probs_rem(i, f, r, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
trans_probs_norem_if(const T0__& i,
                         const T1__& f, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 30;
        local_scalar_t__ l(DUMMY_VAR__);
        (void) l;  // dummy to suppress unused var warning
        stan::math::initialize(l, DUMMY_VAR__);
        stan::math::fill(l, DUMMY_VAR__);
        stan::math::assign(l,(i + f));
        current_statement_begin__ = 31;
        local_scalar_t__ q(DUMMY_VAR__);
        (void) q;  // dummy to suppress unused var warning
        stan::math::initialize(q, DUMMY_VAR__);
        stan::math::fill(q, DUMMY_VAR__);
        stan::math::assign(q,stan::math::sqrt((((i * i) - ((2 * i) * f)) + (f * f))));
        current_statement_begin__ = 32;
        local_scalar_t__ w(DUMMY_VAR__);
        (void) w;  // dummy to suppress unused var warning
        stan::math::initialize(w, DUMMY_VAR__);
        stan::math::fill(w, DUMMY_VAR__);
        stan::math::assign(w,stan::math::exp((-((l + q)) / 2)));
        current_statement_begin__ = 33;
        local_scalar_t__ v(DUMMY_VAR__);
        (void) v;  // dummy to suppress unused var warning
        stan::math::initialize(v, DUMMY_VAR__);
        stan::math::fill(v, DUMMY_VAR__);
        stan::math::assign(v,stan::math::exp((-((l - q)) / 2)));
        current_statement_begin__ = 34;
        validate_non_negative_index("P", "3", 3);
        validate_non_negative_index("P", "3", 3);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> P(3, 3);
        stan::math::initialize(P, DUMMY_VAR__);
        stan::math::fill(P, DUMMY_VAR__);
        current_statement_begin__ = 35;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                    (((((2 * (v - w)) * f) + (v * (q - l))) + (w * (q + l))) / (2 * q)), 
                    "assigning variable P");
        current_statement_begin__ = 36;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                    0, 
                    "assigning variable P");
        current_statement_begin__ = 37;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                    0, 
                    "assigning variable P");
        current_statement_begin__ = 39;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                    ((-((f - l)) * (v - w)) / q), 
                    "assigning variable P");
        current_statement_begin__ = 40;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                    (-(((((2 * f) - l) * (v - w)) - (q * (v + w)))) / (2 * q)), 
                    "assigning variable P");
        current_statement_begin__ = 41;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                    0, 
                    "assigning variable P");
        current_statement_begin__ = 43;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                    ((((-(l) * (v - w)) - (q * (v + w))) / (2 * q)) + 1), 
                    "assigning variable P");
        current_statement_begin__ = 44;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                    (((((v - w) * ((2 * f) - l)) - (q * (v + w))) / (2 * q)) + 1), 
                    "assigning variable P");
        current_statement_begin__ = 45;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                    1, 
                    "assigning variable P");
        current_statement_begin__ = 46;
        return stan::math::promote_scalar<fun_return_scalar_t__>(P);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct trans_probs_norem_if_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const T0__& i,
                         const T1__& f, std::ostream* pstream__) const {
        return trans_probs_norem_if(i, f, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
trans_probs_norem_i(const T0__& i, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 50;
        validate_non_negative_index("P", "3", 3);
        validate_non_negative_index("P", "3", 3);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> P(3, 3);
        stan::math::initialize(P, DUMMY_VAR__);
        stan::math::fill(P, DUMMY_VAR__);
        current_statement_begin__ = 51;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                    stan::math::exp(-(i)), 
                    "assigning variable P");
        current_statement_begin__ = 52;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                    (i * stan::math::exp(-(i))), 
                    "assigning variable P");
        current_statement_begin__ = 53;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                    ((-(stan::math::exp(-(i))) + 1) - (i * stan::math::exp(-(i)))), 
                    "assigning variable P");
        current_statement_begin__ = 55;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                    0, 
                    "assigning variable P");
        current_statement_begin__ = 56;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                    stan::math::exp(-(i)), 
                    "assigning variable P");
        current_statement_begin__ = 57;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                    (1 - stan::math::exp(-(i))), 
                    "assigning variable P");
        current_statement_begin__ = 59;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                    0, 
                    "assigning variable P");
        current_statement_begin__ = 60;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                    0, 
                    "assigning variable P");
        current_statement_begin__ = 61;
        stan::model::assign(P, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                    1, 
                    "assigning variable P");
        current_statement_begin__ = 62;
        return stan::math::promote_scalar<fun_return_scalar_t__>(P);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct trans_probs_norem_i_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const T0__& i, std::ostream* pstream__) const {
        return trans_probs_norem_i(i, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
trans_probs(const T0__& i,
                const T1__& f,
                const T2__& r, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 66;
        if (as_bool(logical_neq(r, 0))) {
            current_statement_begin__ = 67;
            return stan::math::promote_scalar<fun_return_scalar_t__>(trans_probs_rem(i, f, r, pstream__));
        } else {
            current_statement_begin__ = 69;
            if (as_bool(logical_eq(i, f))) {
                current_statement_begin__ = 70;
                return stan::math::promote_scalar<fun_return_scalar_t__>(trans_probs_norem_i(i, pstream__));
            } else {
                current_statement_begin__ = 72;
                return stan::math::promote_scalar<fun_return_scalar_t__>(trans_probs_norem_if(i, f, pstream__));
            }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct trans_probs_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const T0__& i,
                const T1__& f,
                const T2__& r, std::ostream* pstream__) const {
        return trans_probs(i, f, r, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_disbayes : public prob_grad {
private:
        int smooth;
        int nage;
        std::vector<int> mort_num;
        std::vector<int> mort_denom;
        std::vector<int> prev_num;
        std::vector<int> prev_denom;
        std::vector<int> inc_num;
        std::vector<int> inc_denom;
        vector_d rem;
        int K;
        matrix_d X;
        double sprior;
public:
    model_disbayes(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_disbayes(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_disbayes_namespace::model_disbayes";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 78;
            context__.validate_dims("data initialization", "smooth", "int", context__.to_vec());
            smooth = int(0);
            vals_i__ = context__.vals_i("smooth");
            pos__ = 0;
            smooth = vals_i__[pos__++];
            current_statement_begin__ = 79;
            context__.validate_dims("data initialization", "nage", "int", context__.to_vec());
            nage = int(0);
            vals_i__ = context__.vals_i("nage");
            pos__ = 0;
            nage = vals_i__[pos__++];
            check_greater_or_equal(function__, "nage", nage, 0);
            current_statement_begin__ = 80;
            validate_non_negative_index("mort_num", "nage", nage);
            context__.validate_dims("data initialization", "mort_num", "int", context__.to_vec(nage));
            mort_num = std::vector<int>(nage, int(0));
            vals_i__ = context__.vals_i("mort_num");
            pos__ = 0;
            size_t mort_num_k_0_max__ = nage;
            for (size_t k_0__ = 0; k_0__ < mort_num_k_0_max__; ++k_0__) {
                mort_num[k_0__] = vals_i__[pos__++];
            }
            size_t mort_num_i_0_max__ = nage;
            for (size_t i_0__ = 0; i_0__ < mort_num_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "mort_num[i_0__]", mort_num[i_0__], 0);
            }
            current_statement_begin__ = 81;
            validate_non_negative_index("mort_denom", "nage", nage);
            context__.validate_dims("data initialization", "mort_denom", "int", context__.to_vec(nage));
            mort_denom = std::vector<int>(nage, int(0));
            vals_i__ = context__.vals_i("mort_denom");
            pos__ = 0;
            size_t mort_denom_k_0_max__ = nage;
            for (size_t k_0__ = 0; k_0__ < mort_denom_k_0_max__; ++k_0__) {
                mort_denom[k_0__] = vals_i__[pos__++];
            }
            size_t mort_denom_i_0_max__ = nage;
            for (size_t i_0__ = 0; i_0__ < mort_denom_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "mort_denom[i_0__]", mort_denom[i_0__], 0);
            }
            current_statement_begin__ = 82;
            validate_non_negative_index("prev_num", "nage", nage);
            context__.validate_dims("data initialization", "prev_num", "int", context__.to_vec(nage));
            prev_num = std::vector<int>(nage, int(0));
            vals_i__ = context__.vals_i("prev_num");
            pos__ = 0;
            size_t prev_num_k_0_max__ = nage;
            for (size_t k_0__ = 0; k_0__ < prev_num_k_0_max__; ++k_0__) {
                prev_num[k_0__] = vals_i__[pos__++];
            }
            size_t prev_num_i_0_max__ = nage;
            for (size_t i_0__ = 0; i_0__ < prev_num_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "prev_num[i_0__]", prev_num[i_0__], 0);
            }
            current_statement_begin__ = 83;
            validate_non_negative_index("prev_denom", "nage", nage);
            context__.validate_dims("data initialization", "prev_denom", "int", context__.to_vec(nage));
            prev_denom = std::vector<int>(nage, int(0));
            vals_i__ = context__.vals_i("prev_denom");
            pos__ = 0;
            size_t prev_denom_k_0_max__ = nage;
            for (size_t k_0__ = 0; k_0__ < prev_denom_k_0_max__; ++k_0__) {
                prev_denom[k_0__] = vals_i__[pos__++];
            }
            size_t prev_denom_i_0_max__ = nage;
            for (size_t i_0__ = 0; i_0__ < prev_denom_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "prev_denom[i_0__]", prev_denom[i_0__], 0);
            }
            current_statement_begin__ = 84;
            validate_non_negative_index("inc_num", "nage", nage);
            context__.validate_dims("data initialization", "inc_num", "int", context__.to_vec(nage));
            inc_num = std::vector<int>(nage, int(0));
            vals_i__ = context__.vals_i("inc_num");
            pos__ = 0;
            size_t inc_num_k_0_max__ = nage;
            for (size_t k_0__ = 0; k_0__ < inc_num_k_0_max__; ++k_0__) {
                inc_num[k_0__] = vals_i__[pos__++];
            }
            size_t inc_num_i_0_max__ = nage;
            for (size_t i_0__ = 0; i_0__ < inc_num_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "inc_num[i_0__]", inc_num[i_0__], 0);
            }
            current_statement_begin__ = 85;
            validate_non_negative_index("inc_denom", "nage", nage);
            context__.validate_dims("data initialization", "inc_denom", "int", context__.to_vec(nage));
            inc_denom = std::vector<int>(nage, int(0));
            vals_i__ = context__.vals_i("inc_denom");
            pos__ = 0;
            size_t inc_denom_k_0_max__ = nage;
            for (size_t k_0__ = 0; k_0__ < inc_denom_k_0_max__; ++k_0__) {
                inc_denom[k_0__] = vals_i__[pos__++];
            }
            size_t inc_denom_i_0_max__ = nage;
            for (size_t i_0__ = 0; i_0__ < inc_denom_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "inc_denom[i_0__]", inc_denom[i_0__], 0);
            }
            current_statement_begin__ = 86;
            validate_non_negative_index("rem", "nage", nage);
            context__.validate_dims("data initialization", "rem", "vector_d", context__.to_vec(nage));
            rem = Eigen::Matrix<double, Eigen::Dynamic, 1>(nage);
            vals_r__ = context__.vals_r("rem");
            pos__ = 0;
            size_t rem_j_1_max__ = nage;
            for (size_t j_1__ = 0; j_1__ < rem_j_1_max__; ++j_1__) {
                rem(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "rem", rem, 0);
            current_statement_begin__ = 89;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 91;
            validate_non_negative_index("X", "nage", nage);
            validate_non_negative_index("X", "K", K);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(nage,K));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(nage, K);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K;
            size_t X_j_1_max__ = nage;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 93;
            context__.validate_dims("data initialization", "sprior", "double", context__.to_vec());
            sprior = double(0);
            vals_r__ = context__.vals_r("sprior");
            pos__ = 0;
            sprior = vals_r__[pos__++];
            check_greater_or_equal(function__, "sprior", sprior, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 98;
            validate_non_negative_index("inc", "nage", nage);
            num_params_r__ += nage;
            current_statement_begin__ = 99;
            validate_non_negative_index("beta", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 100;
            validate_non_negative_index("lambda", "2", 2);
            num_params_r__ += 2;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_disbayes() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 98;
        if (!(context__.contains_r("inc")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable inc missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("inc");
        pos__ = 0U;
        validate_non_negative_index("inc", "nage", nage);
        context__.validate_dims("parameter initialization", "inc", "vector_d", context__.to_vec(nage));
        Eigen::Matrix<double, Eigen::Dynamic, 1> inc(nage);
        size_t inc_j_1_max__ = nage;
        for (size_t j_1__ = 0; j_1__ < inc_j_1_max__; ++j_1__) {
            inc(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, inc);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable inc: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 99;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "K", K);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(K);
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 100;
        if (!(context__.contains_r("lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        validate_non_negative_index("lambda", "2", 2);
        context__.validate_dims("parameter initialization", "lambda", "vector_d", context__.to_vec(2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda(2);
        size_t lambda_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            lambda(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 98;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> inc;
            (void) inc;  // dummy to suppress unused var warning
            if (jacobian__)
                inc = in__.vector_lb_constrain(0, nage, lp__);
            else
                inc = in__.vector_lb_constrain(0, nage);
            current_statement_begin__ = 99;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(K, lp__);
            else
                beta = in__.vector_constrain(K);
            current_statement_begin__ = 100;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.vector_lb_constrain(0, 2, lp__);
            else
                lambda = in__.vector_lb_constrain(0, 2);
            // transformed parameters
            current_statement_begin__ = 105;
            validate_non_negative_index("cf", "nage", nage);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> cf(nage);
            stan::math::initialize(cf, DUMMY_VAR__);
            stan::math::fill(cf, DUMMY_VAR__);
            current_statement_begin__ = 106;
            validate_non_negative_index("inc_prob", "nage", nage);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> inc_prob(nage);
            stan::math::initialize(inc_prob, DUMMY_VAR__);
            stan::math::fill(inc_prob, DUMMY_VAR__);
            current_statement_begin__ = 108;
            validate_non_negative_index("state_probs", "(nage + 1)", (nage + 1));
            validate_non_negative_index("state_probs", "3", 3);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> state_probs((nage + 1), 3);
            stan::math::initialize(state_probs, DUMMY_VAR__);
            stan::math::fill(state_probs, DUMMY_VAR__);
            current_statement_begin__ = 109;
            validate_non_negative_index("tmp", "3", 3);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> tmp(3);
            stan::math::initialize(tmp, DUMMY_VAR__);
            stan::math::fill(tmp, DUMMY_VAR__);
            current_statement_begin__ = 110;
            validate_non_negative_index("P", "3", 3);
            validate_non_negative_index("P", "3", 3);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> P(3, 3);
            stan::math::initialize(P, DUMMY_VAR__);
            stan::math::fill(P, DUMMY_VAR__);
            current_statement_begin__ = 111;
            validate_non_negative_index("prev", "nage", nage);
            std::vector<local_scalar_t__> prev(nage, local_scalar_t__(0));
            stan::math::initialize(prev, DUMMY_VAR__);
            stan::math::fill(prev, DUMMY_VAR__);
            current_statement_begin__ = 112;
            validate_non_negative_index("mort", "nage", nage);
            std::vector<local_scalar_t__> mort(nage, local_scalar_t__(0));
            stan::math::initialize(mort, DUMMY_VAR__);
            stan::math::fill(mort, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 122;
            stan::math::assign(cf, stan::math::exp(multiply(X, beta)));
            current_statement_begin__ = 124;
            stan::model::assign(state_probs, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        1, 
                        "assigning variable state_probs");
            current_statement_begin__ = 125;
            stan::model::assign(state_probs, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        0, 
                        "assigning variable state_probs");
            current_statement_begin__ = 126;
            stan::model::assign(state_probs, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        0, 
                        "assigning variable state_probs");
            current_statement_begin__ = 128;
            for (int a = 1; a <= nage; ++a) {
                current_statement_begin__ = 129;
                stan::math::assign(P, trans_probs(get_base1(inc, a, "inc", 1), get_base1(cf, a, "cf", 1), get_base1(rem, a, "rem", 1), pstream__));
                current_statement_begin__ = 130;
                stan::model::assign(inc_prob, 
                            stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                            get_base1(P, 1, 2, "P", 1), 
                            "assigning variable inc_prob");
                current_statement_begin__ = 131;
                stan::model::assign(prev, 
                            stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                            (get_base1(state_probs, a, 2, "state_probs", 1) / (get_base1(state_probs, a, 1, "state_probs", 1) + get_base1(state_probs, a, 2, "state_probs", 1))), 
                            "assigning variable prev");
                current_statement_begin__ = 132;
                stan::math::assign(tmp, multiply(stan::model::rvalue(state_probs, stan::model::cons_list(stan::model::index_uni(a), stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list())), "state_probs"), P));
                current_statement_begin__ = 133;
                stan::model::assign(state_probs, 
                            stan::model::cons_list(stan::model::index_uni((a + 1)), stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list())), 
                            tmp, 
                            "assigning variable state_probs");
                current_statement_begin__ = 134;
                stan::model::assign(mort, 
                            stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                            ((get_base1(P, 1, 3, "P", 1) * (1 - get_base1(prev, a, "prev", 1))) + (get_base1(P, 2, 3, "P", 1) * get_base1(prev, a, "prev", 1))), 
                            "assigning variable mort");
                current_statement_begin__ = 136;
                if (as_bool(logical_lt(get_base1(mort, a, "mort", 1), 0))) {
                    current_statement_begin__ = 136;
                    stan::model::assign(mort, 
                                stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable mort");
                }
                current_statement_begin__ = 137;
                if (as_bool(logical_gt(get_base1(mort, a, "mort", 1), 1))) {
                    current_statement_begin__ = 137;
                    stan::model::assign(mort, 
                                stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                                1, 
                                "assigning variable mort");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 105;
            size_t cf_j_1_max__ = nage;
            for (size_t j_1__ = 0; j_1__ < cf_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(cf(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: cf" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable cf: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "cf", cf, 0);
            current_statement_begin__ = 106;
            size_t inc_prob_j_1_max__ = nage;
            for (size_t j_1__ = 0; j_1__ < inc_prob_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(inc_prob(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: inc_prob" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable inc_prob: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "inc_prob", inc_prob, 0);
            current_statement_begin__ = 108;
            size_t state_probs_j_1_max__ = (nage + 1);
            size_t state_probs_j_2_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < state_probs_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < state_probs_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(state_probs(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: state_probs" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable state_probs: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 109;
            size_t tmp_j_1_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < tmp_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(tmp(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: tmp" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable tmp: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 110;
            size_t P_j_1_max__ = 3;
            size_t P_j_2_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < P_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < P_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(P(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: P" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable P: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 111;
            size_t prev_k_0_max__ = nage;
            for (size_t k_0__ = 0; k_0__ < prev_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(prev[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: prev" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable prev: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 112;
            size_t mort_k_0_max__ = nage;
            for (size_t k_0__ = 0; k_0__ < mort_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(mort[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mort" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mort: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 142;
            lp_accum__.add(binomial_log<propto__>(mort_num, mort_denom, mort));
            current_statement_begin__ = 143;
            lp_accum__.add(binomial_log<propto__>(inc_num, inc_denom, inc_prob));
            current_statement_begin__ = 144;
            lp_accum__.add(binomial_log<propto__>(prev_num, prev_denom, prev));
            current_statement_begin__ = 147;
            lp_accum__.add(normal_log<propto__>(get_base1(beta, 1, "beta", 1), 0, 100));
            current_statement_begin__ = 152;
            for (int i = 2; i <= (K - 1); ++i) {
                current_statement_begin__ = 153;
                lp_accum__.add(normal_log<propto__>(get_base1(beta, i, "beta", 1), 0, get_base1(lambda, 1, "lambda", 1)));
            }
            current_statement_begin__ = 155;
            for (int i = K; i <= K; ++i) {
                current_statement_begin__ = 156;
                lp_accum__.add(normal_log<propto__>(get_base1(beta, i, "beta", 1), 0, get_base1(lambda, 2, "lambda", 1)));
            }
            current_statement_begin__ = 158;
            for (int i = 1; i <= 2; ++i) {
                current_statement_begin__ = 159;
                lp_accum__.add(exponential_log<propto__>(get_base1(lambda, i, "lambda", 1), sprior));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("inc");
        names__.push_back("beta");
        names__.push_back("lambda");
        names__.push_back("cf");
        names__.push_back("inc_prob");
        names__.push_back("state_probs");
        names__.push_back("tmp");
        names__.push_back("P");
        names__.push_back("prev");
        names__.push_back("mort");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(nage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((nage + 1));
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nage);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nage);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_disbayes_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> inc = in__.vector_lb_constrain(0, nage);
        size_t inc_j_1_max__ = nage;
        for (size_t j_1__ = 0; j_1__ < inc_j_1_max__; ++j_1__) {
            vars__.push_back(inc(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(K);
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda = in__.vector_lb_constrain(0, 2);
        size_t lambda_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            vars__.push_back(lambda(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 105;
            validate_non_negative_index("cf", "nage", nage);
            Eigen::Matrix<double, Eigen::Dynamic, 1> cf(nage);
            stan::math::initialize(cf, DUMMY_VAR__);
            stan::math::fill(cf, DUMMY_VAR__);
            current_statement_begin__ = 106;
            validate_non_negative_index("inc_prob", "nage", nage);
            Eigen::Matrix<double, Eigen::Dynamic, 1> inc_prob(nage);
            stan::math::initialize(inc_prob, DUMMY_VAR__);
            stan::math::fill(inc_prob, DUMMY_VAR__);
            current_statement_begin__ = 108;
            validate_non_negative_index("state_probs", "(nage + 1)", (nage + 1));
            validate_non_negative_index("state_probs", "3", 3);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> state_probs((nage + 1), 3);
            stan::math::initialize(state_probs, DUMMY_VAR__);
            stan::math::fill(state_probs, DUMMY_VAR__);
            current_statement_begin__ = 109;
            validate_non_negative_index("tmp", "3", 3);
            Eigen::Matrix<double, 1, Eigen::Dynamic> tmp(3);
            stan::math::initialize(tmp, DUMMY_VAR__);
            stan::math::fill(tmp, DUMMY_VAR__);
            current_statement_begin__ = 110;
            validate_non_negative_index("P", "3", 3);
            validate_non_negative_index("P", "3", 3);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> P(3, 3);
            stan::math::initialize(P, DUMMY_VAR__);
            stan::math::fill(P, DUMMY_VAR__);
            current_statement_begin__ = 111;
            validate_non_negative_index("prev", "nage", nage);
            std::vector<double> prev(nage, double(0));
            stan::math::initialize(prev, DUMMY_VAR__);
            stan::math::fill(prev, DUMMY_VAR__);
            current_statement_begin__ = 112;
            validate_non_negative_index("mort", "nage", nage);
            std::vector<double> mort(nage, double(0));
            stan::math::initialize(mort, DUMMY_VAR__);
            stan::math::fill(mort, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 122;
            stan::math::assign(cf, stan::math::exp(multiply(X, beta)));
            current_statement_begin__ = 124;
            stan::model::assign(state_probs, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        1, 
                        "assigning variable state_probs");
            current_statement_begin__ = 125;
            stan::model::assign(state_probs, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        0, 
                        "assigning variable state_probs");
            current_statement_begin__ = 126;
            stan::model::assign(state_probs, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        0, 
                        "assigning variable state_probs");
            current_statement_begin__ = 128;
            for (int a = 1; a <= nage; ++a) {
                current_statement_begin__ = 129;
                stan::math::assign(P, trans_probs(get_base1(inc, a, "inc", 1), get_base1(cf, a, "cf", 1), get_base1(rem, a, "rem", 1), pstream__));
                current_statement_begin__ = 130;
                stan::model::assign(inc_prob, 
                            stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                            get_base1(P, 1, 2, "P", 1), 
                            "assigning variable inc_prob");
                current_statement_begin__ = 131;
                stan::model::assign(prev, 
                            stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                            (get_base1(state_probs, a, 2, "state_probs", 1) / (get_base1(state_probs, a, 1, "state_probs", 1) + get_base1(state_probs, a, 2, "state_probs", 1))), 
                            "assigning variable prev");
                current_statement_begin__ = 132;
                stan::math::assign(tmp, multiply(stan::model::rvalue(state_probs, stan::model::cons_list(stan::model::index_uni(a), stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list())), "state_probs"), P));
                current_statement_begin__ = 133;
                stan::model::assign(state_probs, 
                            stan::model::cons_list(stan::model::index_uni((a + 1)), stan::model::cons_list(stan::model::index_min_max(1, 3), stan::model::nil_index_list())), 
                            tmp, 
                            "assigning variable state_probs");
                current_statement_begin__ = 134;
                stan::model::assign(mort, 
                            stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                            ((get_base1(P, 1, 3, "P", 1) * (1 - get_base1(prev, a, "prev", 1))) + (get_base1(P, 2, 3, "P", 1) * get_base1(prev, a, "prev", 1))), 
                            "assigning variable mort");
                current_statement_begin__ = 136;
                if (as_bool(logical_lt(get_base1(mort, a, "mort", 1), 0))) {
                    current_statement_begin__ = 136;
                    stan::model::assign(mort, 
                                stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable mort");
                }
                current_statement_begin__ = 137;
                if (as_bool(logical_gt(get_base1(mort, a, "mort", 1), 1))) {
                    current_statement_begin__ = 137;
                    stan::model::assign(mort, 
                                stan::model::cons_list(stan::model::index_uni(a), stan::model::nil_index_list()), 
                                1, 
                                "assigning variable mort");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 105;
            check_greater_or_equal(function__, "cf", cf, 0);
            current_statement_begin__ = 106;
            check_greater_or_equal(function__, "inc_prob", inc_prob, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t cf_j_1_max__ = nage;
                for (size_t j_1__ = 0; j_1__ < cf_j_1_max__; ++j_1__) {
                    vars__.push_back(cf(j_1__));
                }
                size_t inc_prob_j_1_max__ = nage;
                for (size_t j_1__ = 0; j_1__ < inc_prob_j_1_max__; ++j_1__) {
                    vars__.push_back(inc_prob(j_1__));
                }
                size_t state_probs_j_2_max__ = 3;
                size_t state_probs_j_1_max__ = (nage + 1);
                for (size_t j_2__ = 0; j_2__ < state_probs_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < state_probs_j_1_max__; ++j_1__) {
                        vars__.push_back(state_probs(j_1__, j_2__));
                    }
                }
                size_t tmp_j_1_max__ = 3;
                for (size_t j_1__ = 0; j_1__ < tmp_j_1_max__; ++j_1__) {
                    vars__.push_back(tmp(j_1__));
                }
                size_t P_j_2_max__ = 3;
                size_t P_j_1_max__ = 3;
                for (size_t j_2__ = 0; j_2__ < P_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < P_j_1_max__; ++j_1__) {
                        vars__.push_back(P(j_1__, j_2__));
                    }
                }
                size_t prev_k_0_max__ = nage;
                for (size_t k_0__ = 0; k_0__ < prev_k_0_max__; ++k_0__) {
                    vars__.push_back(prev[k_0__]);
                }
                size_t mort_k_0_max__ = nage;
                for (size_t k_0__ = 0; k_0__ < mort_k_0_max__; ++k_0__) {
                    vars__.push_back(mort[k_0__]);
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_disbayes";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t inc_j_1_max__ = nage;
        for (size_t j_1__ = 0; j_1__ < inc_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "inc" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t cf_j_1_max__ = nage;
            for (size_t j_1__ = 0; j_1__ < cf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t inc_prob_j_1_max__ = nage;
            for (size_t j_1__ = 0; j_1__ < inc_prob_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "inc_prob" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t state_probs_j_2_max__ = 3;
            size_t state_probs_j_1_max__ = (nage + 1);
            for (size_t j_2__ = 0; j_2__ < state_probs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < state_probs_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "state_probs" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t tmp_j_1_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < tmp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tmp" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t P_j_2_max__ = 3;
            size_t P_j_1_max__ = 3;
            for (size_t j_2__ = 0; j_2__ < P_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < P_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "P" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t prev_k_0_max__ = nage;
            for (size_t k_0__ = 0; k_0__ < prev_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prev" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mort_k_0_max__ = nage;
            for (size_t k_0__ = 0; k_0__ < mort_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mort" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t inc_j_1_max__ = nage;
        for (size_t j_1__ = 0; j_1__ < inc_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "inc" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t cf_j_1_max__ = nage;
            for (size_t j_1__ = 0; j_1__ < cf_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cf" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t inc_prob_j_1_max__ = nage;
            for (size_t j_1__ = 0; j_1__ < inc_prob_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "inc_prob" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t state_probs_j_2_max__ = 3;
            size_t state_probs_j_1_max__ = (nage + 1);
            for (size_t j_2__ = 0; j_2__ < state_probs_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < state_probs_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "state_probs" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t tmp_j_1_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < tmp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tmp" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t P_j_2_max__ = 3;
            size_t P_j_1_max__ = 3;
            for (size_t j_2__ = 0; j_2__ < P_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < P_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "P" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t prev_k_0_max__ = nage;
            for (size_t k_0__ = 0; k_0__ < prev_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "prev" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t mort_k_0_max__ = nage;
            for (size_t k_0__ = 0; k_0__ < mort_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mort" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_disbayes_namespace::model_disbayes stan_model;
#endif
